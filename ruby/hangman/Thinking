
What behaviors does the game have?

What state does the game have?

Observe how the driver code acts as a bridge between the class and the user. Are there times when user input cannot be passed directly to the class, and instead must be adjusted from "human logic" to "computer logic"?

What would you have to change if you wanted to limit how many guesses the user gets?



Using plain old English in a text file or other scratch pad, pseudocode a class for a word-guessing game that meets the following specifications. 

Assume your driver code will handle input and output as far as the user is concerned. 

In other words, write a class designed for a computer program to use, not one designed for a human to use directly, then use driver code to bridge the gap between human and Ruby object.

One user can enter a word (or phrase, if you would like your game to support that), and another user attempts to guess the word.
Guesses are limited, and the number of guesses available is related to the length of the word.
Repeated guesses do not count against the user.

The guessing player receives continual feedback on the current state of the word. So if the secret word is "unicorn", the user will start out seeing something like "_ _ _ _ _ _ _", which would become "_ _ _ c _ _ _" after the user enters a guess of "c".
The user should get a congratulatory message if they win, and a taunting message if they lose.



# One user can enter a word and another user attempts to guess the word
# Guesses are limited, and the number of guesses available is related to the length of the word
# Repeated guesses do not count against the user
# The guessing player receives continual feedback on the current state of the word
# The user should get a congratulatory message if they win, and a taunting message if they lose

# First player enters word and word is stored in a variable
# Display the length of the word to the user in underscores
# Set correct_guesses to less than the length of the word
# Prompt the second player to guess a letter
# If the guess is correct increment correct_guesses by 1, and reveal the correct letter(s) in the appropriate underscore(s)
# If the guess is incorrect increment incorrect_guesses by 1, and inform the player they are incorrect
# Prompt the player to guess another letter
# If the incorrect_guesses is greater than the length of the word, tell the player they lost and exit the program
# Else let the player keep guessing letters
# If the player reveals the word, let them know they won the round